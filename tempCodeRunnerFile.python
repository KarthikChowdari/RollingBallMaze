import streamlit as st
import pandas as pd
import numpy as np
import time
import matplotlib.pyplot as plt
import altair as alt
from collections import deque
import random
import plotly.express as px
import plotly.graph_objects as go

# Set page configuration
st.set_page_config(
    page_title="Process Scheduling Simulator",
    page_icon="‚è±Ô∏è",
    layout="wide"
)



st.markdown("""
<style>
body {
    background-color: #121212;
    color: #ffffff;
}

.big-font {
    font-size:24px !important;
    font-weight: bold;
    color: #ffffff;
}

.process-high {
    background-color: #e63946;
    color: white;
    padding: 8px;
    border-radius: 5px;
    margin: 2px;
    text-align: center;
}

.process-medium {
    background-color: #f77f00;
    color: white;
    padding: 8px;
    border-radius: 5px;
    margin: 2px;
    text-align: center;
}

.process-low {
    background-color: #457b9d;
    color: white;
    padding: 8px;
    border-radius: 5px;
    margin: 2px;
    text-align: center;
}

.cpu-container {
    background-color: #1f1f1f;
    padding: 15px;
    border-radius: 10px;
    text-align: center;
    margin-bottom: 15px;
    color: white;
}

.stats-container {
    background-color: #2c2c2c;
    padding: 15px;
    border-radius: 10px;
    margin-top: 15px;
    color: white;
}

.completed {
    opacity: 0.5;
}
</style>
""", unsafe_allow_html=True)


# # Add custom CSS
# st.markdown("""
# <style>
# .big-font {
#     font-size:24px !important;
#     font-weight: bold;
# }
# .process-high {
#     background-color: #ff6b6b;
#     color: white;
#     padding: 8px;
#     border-radius: 5px;
#     margin: 2px;
#     text-align: center;
# }
# .process-medium {
#     background-color: #ffa533;
#     color: white;
#     padding: 8px;
#     border-radius: 5px;
#     margin: 2px;
#     text-align: center;
# }
# .process-low {
#     background-color: #4dabf7;
#     color: white;
#     padding: 8px;
#     border-radius: 5px;
#     margin: 2px;
#     text-align: center;
# }
# .cpu-container {
#     background-color: #e9ecef;
#     padding: 15px;
#     border-radius: 10px;
#     text-align: center;
#     margin-bottom: 15px;
# }
# .stats-container {
#     background-color: #f8f9fa;
#     padding: 15px;
#     border-radius: 10px;
#     margin-top: 15px;
# }
# .completed {
#     opacity: 0.7;
# }
# </style>
# """, unsafe_allow_html=True)

# Initialize session state
if 'processes' not in st.session_state:
    st.session_state.processes = []
if 'completed_processes' not in st.session_state:
    st.session_state.completed_processes = []
if 'current_time' not in st.session_state:
    st.session_state.current_time = 0
if 'current_process' not in st.session_state:
    st.session_state.current_process = None
if 'simulation_running' not in st.session_state:
    st.session_state.simulation_running = False
if 'gantt_data' not in st.session_state:
    st.session_state.gantt_data = []
if 'queue_snapshots' not in st.session_state:
    st.session_state.queue_snapshots = []

# Define Process class
class Process:
    def _init_(self, pid, arrival_time, burst_time, priority):
        self.pid = pid
        self.arrival_time = arrival_time
        self.burst_time = burst_time
        self.remaining_time = burst_time
        self.priority = priority
        self.start_time = None
        self.finish_time = None
        self.waiting_time = 0
        self.turnaround_time = 0
        self.response_time = None
        
    def is_arrived(self, current_time):
        return current_time >= self.arrival_time
    
    def execute(self, time_quantum):
        if self.start_time is None:
            self.start_time = st.session_state.current_time
            self.response_time = self.start_time - self.arrival_time
            
        execution_time = min(time_quantum, self.remaining_time)
        self.remaining_time -= execution_time
        
        if self.remaining_time <= 0:
            self.finish_time = st.session_state.current_time + execution_time
            self.turnaround_time = self.finish_time - self.arrival_time
            self.waiting_time = self.turnaround_time - self.burst_time
            
        return execution_time
    
    def to_dict(self):
        return {
            "PID": self.pid,
            "Arrival Time": self.arrival_time,
            "Burst Time": self.burst_time,
            "Priority": self.priority,
            "Remaining Time": self.remaining_time,
            "Start Time": str(self.start_time) if self.start_time is not None else "N/A",
            "Finish Time": str(self.finish_time) if self.finish_time is not None else "N/A",
            "Waiting Time": str(self.waiting_time) if self.finish_time is not None else "N/A",
            "Turnaround Time": str(self.turnaround_time) if self.finish_time is not None else "N/A",
            "Response Time": str(self.response_time) if self.response_time is not None else "N/A"
        }
        
    def get_priority_class(self):
        if self.priority <= 3:
            return "process-high"
        elif self.priority <= 7:
            return "process-medium"
        else:
            return "process-low"

# Title and description
st.title("‚öôÔ∏è Process Scheduling Simulator")


# Sidebar for inputs and controls
with st.sidebar:
    st.header("Simulation Controls")
    
    # Algorithm selection
    algorithm = st.selectbox(
        "Scheduling Algorithm",
        ["Priority (Preemptive)", "Priority (Non-Preemptive)"]
    )
    
    is_preemptive = algorithm == "Priority (Preemptive)"
    
    # Time quantum
    time_quantum = st.slider("Time Quantum (seconds)", 0.1, 5.0, 1.0, 0.1)
    
    # Simulation speed
    simulation_speed = st.slider("Simulation Speed", 0.1, 3.0, 1.0, 0.1)
    
    st.divider()
    
    # Process generation
    st.header("Process Generation")
    
    # Manual process input
    with st.expander("Add Individual Process", expanded=True):
        pid = len(st.session_state.processes) + len(st.session_state.completed_processes) + 1
        arrival_time = st.number_input("Arrival Time", min_value=0.0, step=0.1, key="manual_arrival")
        burst_time = st.number_input("Burst Time", min_value=0.1, step=0.1, value=1.0, key="manual_burst")
        priority = st.number_input("Priority (Lower number = higher priority)", min_value=1, max_value=10, value=5, key="manual_priority")
        
        if st.button("Add Process"):
            new_process = Process(pid, arrival_time, burst_time, priority)
            st.session_state.processes.append(new_process)
            st.success(f"Process P{pid} added!")
    
    # Batch process generation
    with st.expander("Generate Multiple Processes"):
        num_processes = st.number_input("Number of Processes", min_value=1, max_value=10, value=3)
        max_arrival_time = st.number_input("Max Arrival Time", min_value=0.0, step=1.0, value=5.0)
        min_burst = st.number_input("Min Burst Time", min_value=0.1, step=0.1, value=0.5)
        max_burst = st.number_input("Max Burst Time", min_value=0.1, step=0.1, value=5.0)
        
        if st.button("Generate Processes"):
            current_id = len(st.session_state.processes) + len(st.session_state.completed_processes) + 1
            for i in range(num_processes):
                arrival = round(random.uniform(0, max_arrival_time), 1)
                burst = round(random.uniform(min_burst, max_burst), 1)
                priority = random.randint(1, 10)
                new_process = Process(current_id + i, arrival, burst, priority)
                st.session_state.processes.append(new_process)
            st.success(f"{num_processes} processes generated!")
    
    st.divider()
    
    # Control buttons
    col1, col2 = st.columns(2)
    
    with col1:
        start_button = st.button("‚ñ∂Ô∏è Start", use_container_width=True)
        if start_button:
            st.session_state.simulation_running = True
    
    with col2:
        reset_button = st.button("üîÑ Reset", use_container_width=True)
        if reset_button:
            st.session_state.processes = []
            st.session_state.completed_processes = []
            st.session_state.current_time = 0
            st.session_state.current_process = None
            st.session_state.simulation_running = False
            st.session_state.gantt_data = []
            st.session_state.queue_snapshots = []
            st.rerun()  # Using st.rerun() instead of experimental_rerun()

# Main content
main_col1, main_col2 = st.columns([2, 1])

with main_col1:
    # Display current state
    st.markdown("<p class='big-font'>System State</p>", unsafe_allow_html=True)
    
    # Current time
    time_container = st.empty()
    time_container.markdown(f"<p style='font-size: 18px'>‚è±Ô∏è Current Time: <b>{st.session_state.current_time:.1f}s</b></p>", unsafe_allow_html=True)
    
    # CPU execution
    cpu_container = st.empty()
    
    # Queues
    st.markdown("### Ready Queue")
    ready_queue = st.empty()
    
    # Completed processes
    st.markdown("### Completed Processes")
    completed = st.empty()
    
    # Gantt chart
    st.markdown("### Gantt Chart")
    gantt_chart = st.empty()

with main_col2:
    # Process table
    st.markdown("<p class='big-font'>Process Table</p>", unsafe_allow_html=True)
    process_table = st.empty()
    
    # Statistics
    st.markdown("<p class='big-font'>Statistics</p>", unsafe_allow_html=True)
    stats_container = st.empty()

# Function to select next process
def select_next_process():
    ready_processes = [p for p in st.session_state.processes if p.is_arrived(st.session_state.current_time)]
    
    if not ready_processes:
        return None
    
    return min(ready_processes, key=lambda p: p.priority)

# Function to update the visualization
def update_visualization():
    # Update process table
    all_processes = st.session_state.processes + st.session_state.completed_processes
    if all_processes:
        processes_df = pd.DataFrame([p.to_dict() for p in all_processes])
        process_table.dataframe(processes_df, hide_index=True)
    else:
        process_table.info("No processes added yet.")
    
    # Update CPU state
    if st.session_state.current_process:
        p = st.session_state.current_process
        progress = 1 - (p.remaining_time / p.burst_time)
        cpu_container.markdown(f"""
        <div class='cpu-container'>
            <p style='font-weight: bold; margin-bottom: 5px;'>CPU</p>
            <div class='{p.get_priority_class()}'>
                P{p.pid} ({p.remaining_time:.1f}s remaining)
                <div style='background-color: rgba(255,255,255,0.3); height: 5px; margin-top: 5px;'>
                    <div style='background-color: white; height: 100%; width: {progress*100}%;'></div>
                </div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    else:
        cpu_container.markdown("""
        <div class='cpu-container'>
            <p style='font-weight: bold; margin-bottom: 5px;'>CPU</p>
            <p>Idle</p>
        </div>
        """, unsafe_allow_html=True)
    
    # Update ready queue

    # queue_html = "<div style='display: flex; flex-wrap: wrap;'>"
    queue_html = f"""
<div class='cpu-container'>
    <p style='font-weight: bold; margin-bottom: 5px;'>Ready Queue</p>
    <div style='display: flex; flex-wrap: wrap;'>
"""
    for p in sorted(st.session_state.processes, key=lambda p: p.priority):
        if p.is_arrived(st.session_state.current_time) and p != st.session_state.current_process:
            queue_html += f"<div class='{p.get_priority_class()}'>P{p.pid} (Priority: {p.priority})</div>"
    queue_html += "</div>"
    
    # if queue_html == "<div style='display: flex; flex-wrap: wrap;'></div>":
    #     queue_html = "<p>No processes in queue</p>"

    if "<div class='" not in queue_html:
     queue_html += "<p>No processes in queue</p>"
    queue_html += "</div>"
    
        
    ready_queue.markdown(queue_html, unsafe_allow_html=True)
    
    # Update completed processes
    completed_html = "<div style='display: flex; flex-wrap: wrap;'>"
    for p in st.session_state.completed_processes:
        completed_html += f"<div class='{p.get_priority_class()} completed'>P{p.pid} (TAT: {p.turnaround_time:.1f}s)</div>"
    completed_html += "</div>"
    
    if completed_html == "<div style='display: flex; flex-wrap: wrap;'></div>":
        completed_html = "<p>No processes completed yet</p>"
        
    completed.markdown(completed_html, unsafe_allow_html=True)
    
    # Update statistics
    if st.session_state.completed_processes:
        avg_turnaround = sum(p.turnaround_time for p in st.session_state.completed_processes) / len(st.session_state.completed_processes)
        avg_waiting = sum(p.waiting_time for p in st.session_state.completed_processes) / len(st.session_state.completed_processes)
        avg_response = sum(p.response_time for p in st.session_state.completed_processes if p.response_time is not None) / len(st.session_state.completed_processes)
        
        stats_container.markdown(f"""
        <div class='stats-container'>
            <p><b>Average Turnaround Time:</b> {avg_turnaround:.2f}s</p>
            <p><b>Average Waiting Time:</b> {avg_waiting:.2f}s</p>
            <p><b>Average Response Time:</b> {avg_response:.2f}s</p>
            <p><b>Throughput:</b> {len(st.session_state.completed_processes) / max(st.session_state.current_time, 0.1):.2f} processes/s</p>
            <p><b>CPU Utilization:</b> {100 * (sum(p.burst_time for p in st.session_state.completed_processes) / max(st.session_state.current_time, 0.1)):.2f}%</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        stats_container.info("No processes completed yet.")
    
    color_palette = [
    '#FF6347',  # Tomato Red
    '#FFD700',  # Gold Yellow
    '#00FFFF',  # Electric Blue
    '#39FF14',  # Neon Green
    '#FF69B4',  # Hot Pink
    '#FFA500',  # Bright Orange
    '#FFFFFF',  # White (for max contrast)
]

# Update Gantt chart
    if st.session_state.gantt_data:
    # Create a DataFrame for the Gantt chart
        gantt_df = pd.DataFrame(st.session_state.gantt_data)

    # Create a color mapping for processes using custom palette
        process_ids = list(range(1, max([d['pid'] for d in st.session_state.gantt_data]) + 1))
        color_mapping = {pid: color_palette[i % len(color_palette)] for i, pid in enumerate(process_ids)}

    # Create the Gantt chart
        chart = alt.Chart(gantt_df).mark_bar().encode(
        x=alt.X('start:Q', title='Time (s)'),
        x2=alt.X2('end:Q'),
        y=alt.Y('pid:N', title='Process ID', sort='ascending'),
        color=alt.Color('pid:N', scale=alt.Scale(domain=process_ids, range=[color_mapping[pid] for pid in process_ids])),
        tooltip=['pid', 'start', 'end', 'duration']
    ).properties(
        width=700,
        height=min(300, max(100, len(set(gantt_df['pid'])) * 30))
    )

    # Display the chart in the Streamlit app
        gantt_chart.altair_chart(chart, use_container_width=True)
    else:
        gantt_chart.info("No execution data yet.")
    
    # # Update Gantt chart
    # if st.session_state.gantt_data:
    #     # Create a DataFrame for the Gantt chart
    #     gantt_df = pd.DataFrame(st.session_state.gantt_data)
        
    #     # Create a color mapping for processes
    #     color_scale = alt.Scale(
    #         domain=list(range(1, max([d['pid'] for d in st.session_state.gantt_data]) + 1)),
    #         scheme='category20'
    #     )
        
    #     # Create the Gantt chart
    #     chart = alt.Chart(gantt_df).mark_bar().encode(
    #         x=alt.X('start:Q', title='Time (s)'),
    #         x2=alt.X2('end:Q'),
    #         y=alt.Y('pid:N', title='Process ID', sort='ascending'),
    #         color=alt.Color('pid:N', scale=color_scale, legend=None),
    #         tooltip=['pid', 'start', 'end', 'duration']
    #     ).properties(
    #         width=700,
    #         height=min(300, max(100, len(set(gantt_df['pid'])) * 30))
    #     )
        
    #     gantt_chart.altair_chart(chart, use_container_width=True)
    # else:
    #     gantt_chart.info("No execution data yet.")



# Main simulation loop
if st.session_state.simulation_running:
    placeholder = st.empty()
    
    # Keep running until all processes are completed or user stops
    while st.session_state.processes and st.session_state.simulation_running:

        
        # Update visualization
        update_visualization()
        
        # Get current process or select a new one
        if not st.session_state.current_process:
            st.session_state.current_process = select_next_process()
        
        # If there's no process ready yet, advance time to next arrival
        if not st.session_state.current_process:
            next_arrival = min([p.arrival_time for p in st.session_state.processes])
            st.session_state.current_time = next_arrival
            continue
        
        # If process is preemptive, check if a higher priority process arrived
        if is_preemptive and st.session_state.current_process:
            higher_priority = [p for p in st.session_state.processes 
                               if p.is_arrived(st.session_state.current_time) 
                               and p.priority < st.session_state.current_process.priority 
                               and p != st.session_state.current_process]
            
            if higher_priority:
                new_process = min(higher_priority, key=lambda p: p.priority)
                
                # Record the preemption in Gantt data
                if st.session_state.current_process.start_time is not None:
                    execution_time = st.session_state.current_time - max(st.session_state.current_process.start_time, st.session_state.gantt_data[-1]['end'] if st.session_state.gantt_data else 0)
                    if execution_time > 0:
                        st.session_state.gantt_data.append({
                            'pid': st.session_state.current_process.pid,
                            'start': st.session_state.current_time - execution_time,
                            'end': st.session_state.current_time,
                            'duration': execution_time
                        })
                
                st.session_state.current_process = new_process
        
        # Execute the current process
        execution_time = st.session_state.current_process.execute(time_quantum)
        
        # Record execution in Gantt data
        st.session_state.gantt_data.append({
            'pid': st.session_state.current_process.pid,
            'start': st.session_state.current_time,
            'end': st.session_state.current_time + execution_time,
            'duration': execution_time
        })
        
        # Take a snapshot of the queue state
        queue_snapshot = {
            'time': st.session_state.current_time,
            'executing': st.session_state.current_process.pid,
            'queue': [p.pid for p in sorted(
                [p for p in st.session_state.processes if p.is_arrived(st.session_state.current_time) and p != st.session_state.current_process],
                key=lambda p: p.priority
            )]
        }
        st.session_state.queue_snapshots.append(queue_snapshot)
        
        # Advance time
        st.session_state.current_time += execution_time

        time_container.markdown(f"<p style='font-size: 18px'>‚è±Ô∏è Current Time: <b>{st.session_state.current_time:.1f}s</b></p>", unsafe_allow_html=True)
        
        # Check if process is completed
        if st.session_state.current_process.remaining_time <= 0:
            # Move from processes to completed_processes
            st.session_state.processes.remove(st.session_state.current_process)
            st.session_state.completed_processes.append(st.session_state.current_process)
            st.session_state.current_process = None
        
        # Wait based on simulation speed
        time.sleep(execution_time / (simulation_speed * 5))
    
    # Final update after simulation ends
    st.session_state.simulation_running = False
    update_visualization()
    
    if not st.session_state.processes:
        st.success("‚úÖ All processes completed!")
else:
    # Just update visualization once when not running
    update_visualization()